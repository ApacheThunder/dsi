/*
	mini - a Free Software replacement for the Nintendo/BroadOn IOS.

	ELF loader: system startup

Copyright (C) 2008, 2009	Hector Martin "marcan" <marcan@marcansoft.com>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 2.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*/

//Modified for nzonehtmlhaxx by yellowstar6.
.arm

.arch armv5te
.fpu softvfp
.eabi_attribute 23, 1
.eabi_attribute 24, 1
.eabi_attribute 25, 1
.eabi_attribute 26, 1
.eabi_attribute 30, 2
.eabi_attribute 18, 4

.extern _main
.extern __got_start
.extern __got_end
.extern __bss_start
.extern __bss_end
.globl _start
.global DC_FlushAll
.global DC_InvalidateAll
.global IC_InvalidateAll
.global nandread_asm

.section .init

_start:
	@ Get real address of _start
	sub	r4, pc, #8
	@ Subtract offset to get the address that we were loaded at
	ldr	r0, =_start
	sub	r4, r4, r0

	@ relocate the GOT entries
	/*ldr	r1, =__got_start
	add	r1, r4
	ldr	r2, =__got_end
	add	r2, r4
got_loop:
	@ check for the end
	cmp	r1, r2
	beq	done_got
	@ read the GOT entry
	ldr	r3, [r1]
	@ add our base address
	add	r3, r4
	str	r3, [r1]
	@ move on
	add	r1, r1, #4
	b	got_loop

done_got:*/
	@ clear BSS
	ldr	r1, =__bss_start
	@add	r1, r4
	ldr	r2, =__bss_end
	@add	r2, r4
	mov	r3, #0
bss_loop:
	@ check for the end
	cmp	r1, r2
	beq	done_bss
	@ clear the word and move on
	str	r3, [r1]
	add	r1, r1, #4
	b	bss_loop

done_bss:

	ldr r0, =0x0000FFFF
	mcr p15, 0, r0, c5, c0, 0
   	mcr p15, 0, r0, c5, c0, 1
	ldr r0, =0x33333333
   	mcr p15, 0, r0, c5, c0, 2
   	mcr p15, 0, r0, c5, c0, 3

	@ take the plunge
	mov	r0, r4
	bl	main

	_start_dielp: @ Added by yellowstar6. This code should never be executed.
	b _start_dielp

.pool

#define DCACHE_SIZE	0x1000
#define CACHE_LINE_SIZE	32

.arm
DC_FlushAll: @ From libnds, write buffer draining code was added by yellowstar6.
/*---------------------------------------------------------------------------------
	Clean and invalidate entire data cache
---------------------------------------------------------------------------------*/
	mov	r1, #0
outer_loop:
	mov	r0, #0
inner_loop:
	orr	r2, r1, r0			@ generate segment and line address
	mcr	p15, 0, r2, c7, c14, 2		@ clean and flush the line
	add	r0, r0, #CACHE_LINE_SIZE
	cmp	r0, #DCACHE_SIZE/4
	bne	inner_loop
	add	r1, r1, #0x40000000
	cmp	r1, #0
	bne	outer_loop
	mov r0, #0
	mcr 15, 0, r0, cr7, cr10, 4 @ Drain write buffer.
	bx	lr

IC_InvalidateAll: @ From libnds.
/*---------------------------------------------------------------------------------
	Clean and invalidate entire data cache
---------------------------------------------------------------------------------*/
	mov	r0, #0
	mcr	p15, 0, r0, c7, c5, 0
	bx	lr

DC_InvalidateAll:
mov r0, #0
mcr 15, 0, r0, cr7, cr6
bx lr

#ifdef NANDHAX

nandread_asm:
ldr r0, =0x02fc37bc
ldr r1, =0xe59ff000
str r1, [r0]
mov r1, #0
str r1, [r0, #4]
ldr r1, =nandreadsectors_a7hook
str r1, [r0, #8]
bx lr

.pool

nandreadsectors_a7hook:
push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
sub	sp, sp, #20
ldr	r3, =0x02fce32c

ldr	r0, =0x02700000
@-ldr	r2, =0x9c0
ldr	r2, =0x3ce0
mov	r1, #0x20

ldr	pc, =0x02fc37c8
nop

.pool

#endif

